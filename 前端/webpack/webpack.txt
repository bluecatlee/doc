npx webpack





入口entry
	入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。
	每个依赖项随即被处理，最后输出到称之为 bundles 的文件中
	
出口output
	指定webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist
	
加载器loader
	处理非js文件。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块
	loader 能够 import/require 导入任何类型的模块（例如 .css 文件）
	
插件plugins
	可以处理很多任务，如打包优化和压缩，重新定义环境中的变量等
	
模式mode
	通过选择development或production之中的一个，来设置mode参数,也可以使用命令行参数的方式：webpack --mode=development/production
	development：会将process.env.NODE_ENV的值设为development。启用NamedChunksPlugin和NamedModulesPlugin
	production：会将process.env.NODE_ENV的值设为production。启用FlagDependencyUsagePlugin,FlagIncludedChunksPlugin,ModuleConcatenationPlugin, 
																   NoEmitOnErrorsPlugin,OccurrenceOrderPlugin,SideEffectsFlagPlugin和UglifyJsPlugin.
	【只设置NODE_ENV，则不会自动设置mode】
	
配置文件
	webpack.config.js
	配置内容是一个json数据结构：
	{
		entry: './src',									#配置一个或多个入口起点 entry point，默认值为./src      单入口时，entry是entry.main的简写
		output: {
			path: path.resolve(__dirname, 'dist'),		#配置bundle的路径
			filename: 'my-first-webpack.bundle.js'		#配置bundle的文件名
		},
		module: {
			rules: [
			  { 
				test: /\.txt$/, 						#用于标识出应该被对应的 loader 进行转换的某个或某些文件
				use: 'raw-loader' 						#表示进行转换时，应该使用哪个 loader
			  }
			]
		},
		plugins: [
			new HtmlWebpackPlugin({template: './src/index.html'})
		]
	}	
	