消息驱动的微服务
	
Stream通过使用Spring Integration来连接代理消息中间件以实现消息事件驱动，并引入了发布-订阅、消费组和分区三个概念。
支持RabbitMQ和Kafka的自动配置。客户端只需申明绑定关系，然后通过channel来操作消息的发送或者接收。

基本注解
	@EnableBinding		类/接口  指定一个或多个定义了@Input或@Output注解的接口，以此实现对消息通道Channel的绑定.被指定的类会被创建对应的bean实例
								 包含了@Configuration，因此被注解的类会成为Spring的配置类
								 其value属性表示要创建的消息通道的绑定，这个绑定会被创建对应的bean的实例
								 
	@Input				方法	 定义消息通道 属性值会被作为bean的名字
	@Output				方法	 定义消息通道 属性值会被作为bean的名字
		
	@StreamListener		方法     将被修饰的方法注册为消息中间件上数据流的事件监听器，属性值表示监听的消息通道名。相当于指定某个方法为消费者处理方法。
								 相比原生的@ServiceActivator 提供了消息转换的功能
								 
	@SendTo				方法     消费方法上添加 表示将消费的结果以消费的方式发送到指定通道中，可以用作消息反馈(比如再发回原输出通道)
	
核心类
	Sink	对输入消息通道绑定的默认实现 
		SubscribableChannel input(); 该方法通过@Input注解绑定了一个名为input的通道

	Source  对输出消息通道绑定的默认实现
		MessageChannel output(); 该方法通过@Output注解绑定了一个名为output的通道
	
	Processor  继承了Sink和Source，即同时定义了一个输入通道和一个输出通道
	
	MessageChannel  消息通道的抽象表示 定义了向消息通道发送消息的方法。
					直接注入MessageChannel，使用其send()方法就可以发送消息。
					为什么还要使用@Output？
						区分多个MessageChannel @Output注解的属性值会作为MessageChannel实例的bean的名字
						如果直接注入加@Qualifier的方式也可行 但是可维护性 扩展性差
						
	SubscribableChannel 继承了MessageChannel，定义了维护消息通道订阅者的方法
	
	
常用配置
	spring
		cloud
			stream
				bingdings
					input				通道名 自定义  <channelName>
						destination		通道对应的主题名
						group			指定组名
						content-type	指定输入的消息类型 采用了MIME Type  @StreamListener会根据类型选择对应的转换器自动进行转换
						consumer
							partitioned	为true表示开启消费者分区功能
						binder			指定当前绑定关系使用的绑定器	不指定则使用默认绑定器 默认绑定器由自动配置类创建或者通过defaultBinder指定
					output
						destination
						producer
							partitionKeyExpression	指定分区键的表达式规则
							partitionCount			指定消息分区的数量
							
				instanceCount			指定当前消费者的总实例数量						(使用分区或kafka时配置)
				instanceIndex			当前实例的索引号 从0开始  每个实例设置不同的值  (使用分区或kafka时配置)
				dynamicDestinations		动态绑定的目标列表 默认为空
						
				defaultBinder			申明默认的绑定器 存在多个绑定器时可以指定一个默认的		
						
				binders					指定绑定器 可以配置多个消息中间件实例 每个实例对应一个绑定器
					<binderName>		绑定器名称
						type			类型 如rabbit
						envorinment		环境
							spring
								rabbitmq
									host
									port
									username
									password
									virtual-host
						inheritEnvironment	当前绑定器是否继承应用程序自身的环境配置 默认true
						defaultCandidate	当前绑定器是否是默认绑定器的候选项
	
	
绑定器Binder
	绑定器隔离了应用程序和消息中间件的具体实现细节，在更换消息中间件产品时只需要更改对应的绑定器，无需修改程序业务代码。
	Binder<T, C extends ConsumerProperties, P extends ProductProperties>
	Binding<T> bindConsumer(String name, String group, T inboundBindTarget, C consumerProperties)
	Binding<T> bindProducer(String name, T outboundBindTarget, ProducerProperties)
	
	绑定类型T目前只有MessageChannel，使用泛型表示未来可扩展
	使用了SPI机制实现了绑定器的可插拔，对应META-INF/spring.binders,其中定义了当前绑定器要使用的自动配置类
	如果classpath下存在多个绑定器
	
	
发布-订阅
	Stream使用了发布-订阅模式，当消息被投递到消息中间件之后，会通过共享的Topic主题进行广播，订阅该主题的消费者接收到消息并进行处理。
	Topic是Stream抽象出的概念，对应RabbitMQ的交换机和Kafka中的Topic
	通道会绑定到Topic上，通道的概念与RabbitMQ本身的通道Channel的概念是一致的
	
消费组
	用来解决重复消费的问题
	同一个组内只会有一个消费者实例会消费某一条消息。【默认多个消费者以轮询的方式消费】
	Stream默认会设定一个消费组，也就是说没有指定消费组的应用实例都会对消息进行消费。
	
消息分区
	用来解决需要将一部分消息固定在一个消费者上处理的情况
	当生产者将消息数据发送给多个消费者实例时，保证拥有共同特征的消息数据始终是由一个消费者实例接收和处理
	Stream单独构建了抽象实现，对本身不具备消息分区的消息中间件也提供了分区功能扩展
	
消息转换
	使用MIME类型，表示头信息contentType。Stream自带一部分消息转换器对特定消息类型进行转换
	
	
其他
	Spring Integration原生支持
		@StreamListener对应Spring Integration中的原生注解是@ServiceActivator，该注解使用inputChannel属性来指定绑定的输入通道名，被注解的方法实现消费逻辑
		@InboundChannelAdapter注解的属性值表示绑定的输出通道名，poller属性可以指定向消息通道发送消息的策略，被注解的方法实现生产逻辑。
		@Transformer注解对指定通道的消息进行转换
		
	Stream与RxJava结合
		引入spring-cloud-stream-rxjava依赖
		@EnableRxJavaProcessor  类  标识当前类中存在一个RxJavaProcessor实现的bean
									@EnableRxJavaProcessor注解自身就结合了@EnableBinding({Processor.class})
	
	