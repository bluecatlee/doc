RESTful API

	说明:各版本差异较大

	通用参数 ?pretty : 格式化输出
	
	返回值
		元数据
			_index 			索引名
			_type 			类型
			_id 			文档id
			_version		版本号(乐观锁)
			_shards			分片信息
			_seq_no
			_primary_term
			_score			文档得分
			_source			文档原始值
	
# 创建索引indexname(索引名称必须小写)
curl -XPUT http://localhost:9200/indexname

# 新增typename类型的文档(6.x版本不允许一个索引下面有多个type)
# PUT且指定的id存在 则为全量更新
POST/PUT /indexname/typename/ -H 'Content-type':'application/json' -d '{"author" : "Doug Cutting"}' 
POST/PUT /indexname/typename/1 -H 'Content-type':'application/json' -d '{"author" : "Doug Cutting"}'  # 指定文档id 否则es会自动生成 PUT请求必须指定id PUT是幂等的 POST不是

# 查询所有索引的所有数据
GET /_search

# 查询指定索引中的所有数据
GET /indexname/_search

# 查询指定类型中的所有数据
GET /indexname/typename/_search

# 根据文档id查询数据
GET /indexname/typename/id
GET /indexname/typename/id?_source  							获取source所有数据(等同于不加_source参数)
GET /indexname/typename/id?_source=author   					获取source中字段名为author的数据
GET /indexname/typename/id?_source=author,name&pretty			获取source中字段名为author和name的数据
GET /indexname/typename/_search?q=author:Doug Cutting&pretty    条件查询author值为Doug Cutting的文档
GET /indexname1,indexname2/typename1,typename2/_search?from=0&size=2&pretty&_timeout=1000  多索引多类型分页查询
GET /_all/typename1,typename2/_search

# 部分更新
# 先将旧数据的文档标记为删除状态 然后添加新的文档 删除状态的文档会在后续统一清除
# 外层json数据的必须要有名为doc或者script的键
# 添加字段或更新字段值 
POST /indexname/typename/id/_update -H 'Content-type':'application/json' -d '{"doc":{"age" : 30}}' 

# 删除数据
# 文档不存在 删除操作也会导致_version值+1(保证多节点间的不同操作的顺序被正确标记了)
# 删除不会立即删除 而是先标记为删除状态
DELETE /indexname/typename/id
DELETE /indexname/typename/_query?q=name:val   #条件删除indexname所有中typename类型中字段名称name为val的文档
DELETE /_all/_query?q=name:val                 #条件删除所有索引中字段name值为val的文档

# 批量操作bulk
POST /indexname/typename/_bulk --data-binary @file
# create 如果数据存在则报错； index 如果数据存在仍会执行成功


# 其他
# 查看所有索引信息
GET /_cat/indices?v

# 查看指定索引信息
GET /indexname

# 查看集群健康信息
GET /_cluster/health
# 查看集群状态
GET /_cluster/state
# 查看分片分配信息
GET /_cluster/allocation/explain