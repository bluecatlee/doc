mysql默认自动提交
lock tables锁定当前线程的表，如果表被其他线程锁定，则当前线程会等待
unlock tables释放当前线程获得的任何锁定，当前线程执行另一个lock tables时会隐式解锁之前的表

lock方式加的表锁，不能通过rollback进行回滚
锁表一般是myisam用的多
rollback是innodb用的

所有ddl语句不能回滚，并且部分ddl语句会造成隐式提交




事务
	ACID
		原子性
		一致性
		隔离性
		持久性
		
	脏读：一个线程读到另一个线程尚未提交的操作
	不可重复读：一个事务中重复读取，数据不一致(由于其他线程的修改删除操作)
	幻读：一个事务中重复读取，会多出数据(由于其他线程新增了数据)
		
	隔离级别
		未提交读Read uncommitted				导致脏读，不可重复读，幻读			
		已提交读Read committed					不会有脏读，但是有不可重复读的问题和幻读的问题
		可重复读Repeatable Read					不会有脏读和不可重复读的问题，但是会有幻读的问题
		序列化Serializable						完全串行的。保证了绝对的读写一致性，但是并发性很差。
		
	mysql解决数据读一致性的方法
		1）锁
		2）MVCC 多版本并发控制，即不加锁，升成快照，对快照操作。多个快照就像同一数据的多个版本



分布式事务（XA事务）
	只支持InnoDB存储引擎
	RM 资源管理器
	TM 事务管理器
	
	两阶段提交
		第一阶段：TM告知所有RM准备提交。
		第二阶段：TM告知是否要提交或回滚。如果第一阶段所有分支指示可以提交，则此时TM告知提交；
					如果第一阶段有分支指示它不能提交，则所有分支被告知回滚。
					
				  问题：mysql是通过binlog进行复制和灾难恢复的。
				        如果分支事务到达prepare状态时，数据库服务重启，通过binlog恢复数据，
						因为此时的事务是未提交的，需要手工处理是继续提交还是回滚。
						
						如果事务在prepare状态客户端异常了，数据库会回滚未完成的分支事务，但是对于其他
						分支事务而言可能是成功提交了，就会导致分布式事务的不一致。
						
						
						
锁
	表锁：myisam memory innodb都支持。
			开销小，加锁快，不会出现死锁，锁粒度大，锁冲突概率大，并发度最低。
			表锁适用于查询多的情况。
			
			表共享读锁
				myisam在读之前会自动加读锁
			表独占写锁
				myisam在写之前会自动加写锁
				
			myisam表不出现死锁是因为：加锁时会同时取得涉及的所有表的锁，不能操作未获得锁的表，不支持锁升级，这样就不存在多线程对多个锁获取顺序不一致的问题。	
			
	行锁：innodb默认的锁。
			行锁适用于有大量更新并且有并发的情况
			内部还使用了意向锁来允许行锁与表锁共存。
			
			共享锁
				select * from table_name where .. lock in share mode;
			
			排它锁
				select * from table_name where .. for update;
			
			意向共享锁
			意向排它锁
			
			记录锁：针对索引项加的锁，不是针对行加的锁。innodb如果不通过索引条件检索数据，则会对所有记录加锁，就像表锁。
			间隙锁：
			Next-Key锁：默认
				通过范围条件加锁时，满足范围条件但是实际不存在的行也会被加锁，意味着这些行不能insert，这是为了防止幻读。而且mysql考虑了binlog恢复的问题
			
			死锁：多线程获取锁的顺序不一致。改成一致！
			
			
	页锁：介于表锁行锁。


表级AUTO-INC锁	
	特殊的表锁
	
	innodb_autoinc_lock_mode
		传统模式	对auto_increment列插入语句时加表级auto-inc锁，只有插入执行结束之后才会释放锁
		连续模式 	【默认】可以事先确定插入行数的语句（包括多行和单行），会分配连续确定的auto-increment值；
					对于插入行数不确定的语句，仍然加表级auto-inc锁。（注：在这种模式下，如果回滚，auto-increment并不会回滚，则导致自增列不连续）
		交错模式	同一时刻多条SQL语句产生交错的auto-increment值。这个模式没有AUTO-INC锁	


	insert on duplicate key update就算update也会自增auto_increment的值