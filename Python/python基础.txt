基本数据类型
	基本数据类型是不可变的

	Numbers（数字）
		int（有符号整型）
		long（长整型[也可以代表八进制和十六进制]）：
			在 Python3.X 版本中 long 类型被移除，使用 int 替代。
		float（浮点型）
		complex（复数）
			Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。
		
		math模块、cmath模块都是操作数值的，cmath主要操作复数
		
		
	String（字符串）
		[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。截取可以接收第三个参数，参数作用是截取的步长
		加号（+）是字符串连接运算符，星号（*）是重复操作
		【python不支持单字符类型】
		
		字符串格式化 
			类似 C 中 sprintf 函数
		
	List（列表）
		列表用 [ ] 标识，是 python 最通用的复合数据类型。
		列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，
		下标可以为空表示取到头或尾。
		列表的数据项不需要具有相同的类型
		list.append,list.insert
		del或list.remove
		
	Tuple（元组）
		元组是另一个数据类型，类似于 List（列表）。
		元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。
		元组是不允许更新的。而列表是允许更新的
		元组中只包含一个元素时，需要在元素后面添加逗号,如tup1 = (50,)，因为()可以被当做数学运算中的括号
		任意无符号的对象，以逗号隔开，默认为元组。
		元组中的一级元素不能修改，但是二级可以
		
	Dictionary（字典）
		字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合
		字典当中的元素是通过键来存取的，而不是通过偏移存取
		字典用"{ }"标识。字典由索引(key)和它对应的值value组成。
		如果用字典里没有的键访问数据，[]方式获取会输出错误，建议使用get方法
	
-------------
数据类型转换

	int(x [,base])		将x转换为一个整数
	long(x [,base] )	将x转换为一个长整数
	float(x)			将x转换到一个浮点数
	complex(real [,imag])	创建一个复数
	str(x)				将对象 x 转换为字符串
	repr(x)				将对象 x 转换为表达式字符串
	eval(str)			用来计算在字符串中的有效Python表达式,并返回一个对象
	tuple(s)			将序列 s 转换为一个元组
	list(s)				将序列 s 转换为一个列表
	set(s)				转换为可变集合
	dict(d)				创建一个字典。d 必须是一个序列 (key,value)元组。
	frozenset(s)		转换为不可变集合
	chr(x)				将一个整数转换为一个字符
	unichr(x)			将一个整数转换为Unicode字符
	ord(x)				将一个字符转换为它的整数值
	hex(x)				将一个整数转换为一个十六进制字符串
	oct(x)				将一个整数转换为一个八进制字符串
	
-------------
运算符
	python中的特殊运算符： (其他略)
		*		乘  字符串也能乘，即重复输出字符串
		**		幂 
		//		取整除 - 返回商的整数部分（向下取整）
		**=
		//=
		and		相当于&&
		or		相当于||
		not		相当于!
		in		如果在指定的序列中找到值返回 True，否则返回 False
		not in	如果在指定的序列中没有找到值返回 True，否则返回 False。
		is		is是判断两个标识符是不是引用自一个对象		类似 id(x) == id(y)   id()函数用于获取对象的内存地址
		is not	is not是判断两个标识符是不是引用自不同对象	类似 id(a) != id(b)  【注意：== 用于判断引用变量的值是否相等】
		
		lambda
		
		注意没有自增、自减操作符
	
------------
日期和时间
	相关模块：time、calender、datetime、pytz、dateutil
	
-----------
函数 
	值传递：对于不可变类型(string、numbers、tuples)是值传递
	引用传递：对于可变类型(list,dict，自定义对象)是引用传递
	python 中一切都是对象，严格意义不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象
	
	例如 def test(a, b = 1, *args):
			pass
	
	参数 
		必备参数		必传且以正确的顺序传入 否则报错
		关键字参数		顺序可以不一致 因为python解释器能够用参数名匹配参数值  ，调用如：test(b=2, a="哈哈")
		默认参数		默认参数是函数声明上的参数有默认值，调用时可不传该参数，调用如：test(a="哈哈")
		不定长参数		*标识为不定长参数 可传0个或n个参数。一般来说*表示这个参数以元组的形式传入
						**用于参数前则表示传入的(多个)参数将按照字典的形式存储，是一个字典
	
	变量作用域
		定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。
		局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。
		调用函数时，所有在函数内声明的变量名称都将被加入到作用域中
		
		global关键字---将变量定义为全局变量。可以通过定义为全局变量，实现在函数内部改变变量值。
		
	return fun 和 return fun() 的区别	
		return fun表示返回函数
		return fun()表示返回函数的返回值
	
	匿名函数
		lambda只是一个表达式 不是代码块
		lambda有自己的命名空间，不能访问自有参数列表之外或全局命名空间里的参数   【lambda不能访问全局变量？？？java中可以把 但是不能修改】
		语法：  lambda [arg1 [,arg2,.....argn]]:expression
	
	全局函数/内置函数
		cmp		比较两个对象
		len		计算长度
		str 	转成字符串
		#type 	获取变量的类型
		del     删除(变量的引用 或者列表中的某个元素等..)
		#dir 	获取模块中的所有内容 包括变量和函数
		help(obj) 在线帮助, obj可是任何类型    
		callable(obj) 查看一个obj是不是可以像函数一样调用    
		repr(obj) 得到obj的表示字符串，可以利用这个字符串eval重建该对象的一个拷贝    
		eval_r(str) 表示合法的python表达式，返回这个表达式    
		dir(obj) 查看obj的name space中可见的name    
		hasattr(obj,name) 查看一个obj的name space中是否有name    
		getattr(obj,name) 得到一个obj的name space中的一个name    
		setattr(obj,name,value) 为一个obj的name   
		space中的一个name指向vale这个object    
		delattr(obj,name) 从obj的name space中删除一个name    
		vars(obj) 返回一个object的name space。用dictionary表示    
		locals() 返回一个局部name space,用dictionary表示    
		globals() 返回一个全局name space,用dictionary表示    
		type(obj) 查看一个obj的类型    
		isinstance(obj,cls) 查看obj是不是cls的instance    
		issubclass(subcls,supcls) 查看subcls是不是supcls的子类  

		以及类型转换函数等..
		
------------
模块
	Module，是一个Python文件 以.py结尾，包含了 Python 对象定义和Python语句
	模块能定义函数，类和变量，模块里也能包含可执行的代码
	
	import 导入模块
		import module1[, module2[,... moduleN]]
		也可以直接导入函数： import module1.func1
		from moduleName import func1[, func2[, ... funcN]]也是导入模块中指定函数的方式，不推荐 避免变量名重复
		from moduleName import * 
		
	搜索路径：
		1、当前目录
		2、如果不在当前目录，Python 则搜索在环境变量 PYTHONPATH 下的每个目录。
		3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。
		
	命名空间：
		命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典
		一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量
		每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样
		Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
		因此，如果要给函数内的全局变量赋值，必须使用 global 语句。
		
	包 
		包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境
		包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。__init__.py 用于标识当前文件夹是一个包
	
------------
异常处理
	BaseException：所有异常的基类
	Exception：常见错误的基类
	RuntimeError
	
	异常是Python对象，表示一个错误
	当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。
	
	异常处理 
		try/except语句
		raise 触发异常 相当于throw
	
------------
其他 
	python中也有类似IntCache的概念
	python的交互模式在分配内存的时候比较特殊
	python里的数值和字符串之类的都是不可变对象，对不可变对象操作的结果都会生成一个新的对象，因而没有自增自减
		(java中的自增是改值)
	注意[:]操作是拷贝 也就是地址会变
	不支持switch case 
	pass语句：不做任何事情，一般用做占位语句。python2中空函数会报错，可以用pass占位。
	支持while … else、for … else 
	支持for in
	#del可以删除变量的引用
	在 python 中，类型属于对象，变量是没有类型的
	
	python的垃圾回收是引用计数法
	
------------
面向对象
	类中定义的函数叫方法
	类变量在这个类的所有实例之间共享，可以在内部类或外部类使用类名.类变量名的方式访问
	__init__()  构造方法
	self 代表类的实例，而非类。
	类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数, 按照惯例它的名称是 self，不过调用的时候不必传入
	包括构造方法也要有self参数
	事实上self改成其他名字也可以
	
	python中实例化对象不用new ，就像调用函数一样，如：emp1 = Employee("Zara", 2000)
	
	#__del__   析构函数
	
	继承
		支持多继承
		创建子类对象时不会调用父类的构造，如果需要，则必须在子类的构造中显示的调用父类构造，或者不重写父类构造
		调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数
		首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找
		
		支持重写、重载方法
		
		特殊：python支持重载运算符
		
	类的私有属性
		__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs	
	类的方法
		在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数	
		
	Python不允许实例化的类访问私有数据，但你可以使用 object._className__attrName（ 对象名._类名__私有属性名 ）访问属性	
	
	【对于变量来说：一个_，相当于protected，两个_，即__，相当于private，没有则相当于public】

	继承 object 类的是新式类，不继承 object 类的是经典类