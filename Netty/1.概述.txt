Netty是一个基于异步和事件驱动的高性能的网络编程框架

核心组件
	Channel
		代表一个到实体的开放连接，如读操作和写操作。实体指硬件设备、文件、网络套接字等。
		可以看做是数据读写的载体，它可以被打开关闭、连接。
		
	回调
		回调其实就是一个方法，一个指向已经被提供给另外一个方法的方法引用。是操作完成之后进行通知的常见方式之一。
		具体就是执行方法时额外传入的ChannelHandler的实现 
		
	Future
		另一种操作完成时通知应用程序的方式。允许手动检查操作是否已完成，或者一直阻塞直到操作完成。
		Netty中扩展实现为ChannelFuture，并且ChannelFuture可以绑定ChannelFutureListener处理特定事件
		
	事件和ChannelHandler
		事件主要有
			连接已被激活或者连接失活
			数据读取
			用户事件
			错误事件
			打开或关闭到远程节点的连接
			写出数据
		各个ChannelHandler会都成处理器链，按顺序执行	
		
	ChannelPipeline
		handler链的容器
		
	EventLoop
		事件循环
		事件循环组中包含多个事件循环
		一个事件循环只和一个线程绑定，所有事件循环处理的I/O都在专有的线程上被处理
		一个channel只能注册到一个事件循环，一个事件循环上可以注册多个channel
		一个给定的channel的I/O操作都是由同一个线程处理的。这样就不需要再进行同步。