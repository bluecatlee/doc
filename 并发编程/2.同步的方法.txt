【同步容器】
	Vector
	Hashtable
	Collections.synchronizedXxx
		将普通容器类的状态封装起来，对每个公有方法都进行同步，使得每次只有一个线程能访问容器的状态

	问题：
		同步容器类是线程安全的，但是很多时候仍需要客户端加锁来保护复合操作。
		容器的迭代使用Iterator迭代器(for-each只是语法糖)，并发修改会抛出ConcurrentModificationException，这是一种快速失败的实现，只要迭代期间检测到容器发生变化就抛出异常。
		(注意：并发修改时，也有可能并不会抛出异常，比如没有添加删除元素时；单线程中也有可能排除并发修改异常，比如没有使用Iterator.remove()而是直接操作原集合来删除元素)
		一种方案是克隆容器(克隆本身需要加锁)再迭代，性能较差(克隆操作性能开销大)
		理论上所有对共享容器进行迭代的地方都要加锁
		
		隐藏迭代器
			打印集合或者调用集合的toString方法时往往会进行迭代，如果这个容易不是同步容器，就可能出现并发修改异常
			toString hashCode equals，containsAll removeAll retainAll，以及将容器作为构造的参数都会间接的进行迭代
			
		同步会严重降低并发性
		
【并发容器】		
	用来替代同步容器
	ConcurrentHashMap---------代替同步的基于散列的Map
		不是在每个方法上都加锁，而是使用分段锁(更加细粒度)
		任意数量的读线程可以并发的访问map，读线程和写线程可以并发的访问map，一定数量的写线程可以并发修改map
		对应的迭代器不会抛出并发修改异常，迭代时不需要加锁。
		推荐使用它来代替同步Map，除非需求独占访问Map
	
	ConcurrentSkipListMap-----代替同步的SortedMap
	ConcurrentSkipListSet-----代替同步的SortedSet
	
	CopyOnWriteArrayList------代替同步List
		是否类似于go语言中的切片类型？
		迭代期间不需要对容器进行加锁或者复制，不会抛出并发修改异常。
		Copy-On-Write: 写入时复制。每次修改时都会创建并重新发布一个新的容器副本。
		
	CopyOnWriteArraySet-------代替同步Set
	
	ConcurrentLinkedQueue-----先进先出队列
	
【阻塞队列】
	BlockingQueue
	put() take() offer() poll()
	如果队列满了 put方法将阻塞，如果队列为空， take方法将阻塞
	
	队列可以是有界的或无界的，无界队列永远不会充满，无界队列的put方法永远不会阻塞
	生产者-消费者模式可以采用阻塞队列来实现。生产者消费者可以并发执行。问题：消费者线程永远不会退出，程序无法终止。
	
	LinkedBlockingQueue		FIFO
	ArrayBlockingQueue	    FIFO
	PriorityBlockingQueue	优先级阻塞队列
	SynchronousQueue        同步队列，没有入列enqueue和出列dequeue操作
	
	串行线程封闭
		生产者-消费者这种模式与阻塞队列一起，实现了将对象所有权从生产者交付给消费者。
		线程封闭对象只能有单个线程所有，但是可以通过安全发布对象来转移所有权。
		
	双端队列Deque与工作密取	
	
【阻塞方法与中断方法】	
	
	当某个方法抛出InterruptException时，表示该方法是一个阻塞方法。
	Thread.interrupt()方法用来中断线程或者查询线程是否已经被中断。每个线程都有一个boolean类型的表示当前线程是否中断的属性
	
	如何处理InterruptException
		传递InterruptException：不处理该异常或者捕获了简单处理之后重新抛出这个异常
		恢复中断：Thread.currentThread().interrupt();
		
【同步工具类】
	阻塞队列
	
	闭锁Latch
		在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有任何线程能通过，当到达结束状态时，这扇门会打开并允许所有的线程通过。
		当闭锁到达结束状态时，将不会再改变状态，因此这扇门将永远保持打开状态。
		CountDownLatch：由一个计数器表示要等待的数量，countDown()方法递减计数器，await()方法等待计数器到0。如果计数器非0，await会一直阻塞。
		这种方式可以让所有线程就绪后再一起并发的执行，简单的for循环创建多个任务执行并不是真正的并发。
		
		FutureTask
			也可用作闭锁。表示一种抽象的可生成结果的计算，通过Callable来实现，相当于一种可生成结果的Runnable，有3种状态：等待运行，正在运行，运行完成。
			Future.get 如果任务已完成，会立即返回结果；否则get会阻塞直到任务进入完成状态(返回结果或抛出异常)。
			FutureTask可以将计算结果传递到另一个线程，在Executor框架中表示异步任务。
			
	信号量Semaphore
		计数信号量控制操作的数量或者作为边界等功能
		执行操作时首先获取许可permit，并在使用后释放release许可。如果没有许可，acquire将阻塞到有许可。
		初始值为1的信号量可以作为互斥体，类似具备不可重入的锁。
		可以用来实现资源池，如数据库连接池。(BlockingQueue也可以构造阻塞对象池)
		可以用来将任何的容器变成有界阻塞容器
		
	栅栏Barrier
		类似闭锁。但是闭锁是一次性的，一旦进入终止状态，就不能被重置。
		栅栏能阻塞一组线程知道某个事件发生。所有线程必须同时到达栅栏位置才能继续执行。而闭锁用来等待事件。
		CyclicBarrier
			当线程到达栅栏位置时将调用await方法，这个方法将阻塞知道所有线程都到栅栏位置。次吃栅栏将打开，所有的线程被释放，而栅栏被重置以便下次使用。
		Exchanger
			两方栅栏，交换器
		
		
【显式锁】
	Lock接口和ReentrantLock
	提供了与synchronized相同的互斥性与内存可见性。加锁与解锁与synchronized的语义相同，并且也是可重入的
	一定要在finally中释放锁！
	
	轮询锁与定时锁	
		可以避免死锁的发生，能够实现有时间限制的操作
		tryLock()
		tryLock(long timeout, TimeUnit unit)
		
	可中断的锁获取操作(普通锁在获取的时候会一直阻塞)
		lockInterruptibly()
		
	非块结构的加锁

	公平性
		默认创建的是非公平的锁，即线程获取锁的顺序与线程，请求锁的顺序无关
		可以指定为公平锁，但是公平锁的性能低点，且一般不需要公平锁
		
		
	---------------------------
	读写锁
		ReadWriteLock ReetrantReadWriteLock
		读锁 写锁分离。
		避免所有线程都请求读取时还要加锁的缺点。
		
		释放优先：当一个写操作释放写锁时，且当前有读线程和写线程等待获得锁，那么应该优先选择什么锁，还是最先发出请求的线程获得锁？
		读线程插队：如果当前有写线程在等待，那么后续的读线程能否插队到写线程的前面？
		重入性
		降级：写入锁能否在不释放的前提下获得读取锁？
		升级
	
	