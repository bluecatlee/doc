立即加载/饿汉模式
	使用时实例已经提前创建，多线程环境下实例的内部数据可能不一致。
	且jvm启动时可能就需要创建这些单例，在大量单例的时候影响jvm启动。
	
延迟加载/懒汉模式
	获取实例时才创建。
	问题：多线程情况下可能会创建出多个实例。
	解决：
		同步，如果锁的粒度太大，并发性差
		同步，如果锁的粒度太小，可能还是有并发问题。
		DCL：Double Ckeck Locking 双检查锁
			如果使用单纯的双重检查锁并不好，可能导致获取到部分构造的实例（构造方法被指令重排序了）
			volatile + 锁，避免出现指令重排序。【延迟加载并使用volatile加锁的双重检查模式会比较好】
			
静态内部类实现单例/Holder
	利用了类加载时初始化实例只有一个线程，将实例放到静态内部类中实现懒加载。
	
序列化与反序列化实现单例
	默认反序列化会创建新的对象，是多例的；但是可以在反序列化时使用readResolve(),复用原有对象。
	
静态代码块实现单例
	这种和饿汉一样
	
enum枚举实现单例
	使用枚举类时，构造会被自动调用。构造只会被调用一次。