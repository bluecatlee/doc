任务执行的策略
	单线程串行执行	吞吐率低响应慢，服务器资源利用率低
	多线程并行执行  开销大 资源消耗大 稳定性差

【Executor框架】
	Executor接口 
	void execute(Runnable command);
	
	Executor基于生产者-消费者模式 以异步方式来执行任务 Runnable表示任务
	尽量使用Executor来代替new Thread(runnable).start()这样的代码，因为可以配合执行策略更好的执行任务
	
	线程池
		相比于为每个任务创建一个线程，线程池能够减少创建和销毁线程带来的巨大开销，复用已有的线程也提高了响应性能。
		Executors中的静态工厂方法提供了
		固定长度的线程池Executors.newFixedThreadPool(int size)
		可缓存的线程池Executors.newCachedThreadPool()  缓存一部分线程以备复用，也会回收空闲的线程。池的大小没有限制
		单线程Executors.newSingleThreadExecutor() 能够确保任务在线程中按顺序执行(FIFO LIFO 优先级)
		定时的固定长度的线程池Executors.newScheduledThreadPool() 延迟或定时执行，基于相对时间。 类似Timer(Timer基于绝对时间，且只会创建一个线程)
		
	Executor生命周期
		如果无法正确关闭Executor，jvm将无法结束。(jvm只有在所有线程全部终止后才会退出)
		ExecutorService有3种状态：运行、关闭和已终止。
			shutdown方法执行平缓的关闭过程：不再接受新任务，同时等待已经提交的(包括未开始的)任务执行完成。
			shutdownNow方法执行粗暴的关闭：取消所有运行中的任务，不再启动队列中尚未开始执行的任务。
			
	延迟任务与周期任务
		基于固定速率来调度
		基于固定延时来调度
		Timer单线程 基于绝对时间，如果抛出了unchecked exception，线程不会继续执行，相当于任务被取消。 ----------- 线程泄漏
		尽量少使用Time
		
	Future：任务的生命周期
		任务的生命周期阶段：创建、提交、开始、完成。	
		get任务已完成：立即返回或抛出异常
		get任务未完成：阻塞直到任务完成
		get任务被取消：将抛出CancellationException
		
	Callable<T>
		
		
-----------------------------
【任务取消】
java并未提供安全的终止线程的方法 Thread.stop() Thread.suspend()有缺陷。

取消的原因
	用户请求取消：GUI的取消按钮；JMX管理接口的取消请求
	有时间限制的操作：耗时操作超时可能需要取消
	应用程序事件
	错误：遇到一些错误如磁盘空间已满时，需要取消，此时可能会记录当前状态以便时候恢复
	关闭：一个程序或服务关闭时，如果是平缓的关闭，会等待在执行的任务继续执行直至完成，如果是立即关闭，当前的任务可能会被取消。
	
一个可取消的任务必须拥有取消策略	

【线程中断】
	使一个线程终止另一个线程的工作，是一种协作机制	
	中断是实现取消的最合理的方式
	
	Thread
		void interrupt()				中断线程，将标识设为true，并不是立即停止被中断线程正在执行的工作，只是发出一个请求
		boolean isInterrupted()			返回是否中断
		static boolean interrupted()	清除当前线程的中断状态，并返回之前的值。如果返回true必须处理，再次调用interrupt来恢复中断或者抛出InterruptedException
		
	Thread.sleep,Object.wait都是阻塞方法，会检查线程何时中断，并且在发现中断时提前返回(清除中断状态，抛出InterruptedException，表示阻塞操作由于中断而提前结束)
	
	--------------------
	中断策略：
		每个线程拥有各自的中断策略。java没有提供抢占式的中断机制。
		线程应该只能由其所有者中断，所以大部分可阻塞的库函数都只是抛出InterruptedException作为中断响应，由调用栈中的上层代码进行处理。
		
	--------------------
	响应中断
		传递异常
		恢复中断状态
		
	---------------------
	使用Future.cancel来取消
	
	---------------------
	不可中断的阻塞
		java.io包中的同步Socket I/O
		java.io包中的同步I/O
		Selector的同步I/O
		获取某个锁
		
非正常的线程终止
	RuntimeException
	当一个线程由于未捕获异常而退出时，jvm会把这个事件报告给应用程序提供的UncaughtExceptionHandler(Thread类中)异常处理器；
	如果没有提供，默认将栈追踪信息输出到System.err
	
JVM关闭
	正常关闭
		当最后一个非守护线程结束时，或者当调用了System.exit，或者通过其他特定于平台的方法(如SIGINT信号或键入Ctrl-C)
	强行关闭
		调用Runtime.halt或者在操作系统中发送SIGKILL信号
		
	---------------
	关闭钩子
		正常关闭jvm时，会调用已注册的所有关闭钩子。jvm不保证关闭钩子的调用顺序，可能会与应用程序线程并发执行。
		当所有关闭钩子都执行结束时，如果runFinalizersOnExit为true，将运行终结器，然后再停止。
		强制关闭jvm时，不会运行关闭钩子。
		
		关闭钩子应该是线程安全的。
		
	--------------
	守护线程
		jvm创建的所有线程 除了主线程都是守护线程(如gc线程等)。
		新创建的线程都是继承主线程的，所以都是普通线程。
		jvm停止时，所有的守护线程将被丢弃。
		
	--------------
	终结器
		finalize()
		避免使用终结器
		
##########################################################################################################
线程饥饿死锁
	如果任务之间存在依赖，则在单线程或者线程池不够大的情况下可能会产生饥饿死锁。可以考虑使用无界的线程池
	
ThreadPoolExecutor

饱和策略
	中止策略AbortPolicy。默认的策略，会抛出未检查的RejetedExcutionException
	抛弃策略DiscardPolicy。悄悄抛弃任务
	抛弃最旧的策略DiscardOldestPolicy。
	调用者运行策略CallerRunsPolicy。返回由提交任务的线程去执行任务。如果请求持续过载，会显现出平缓的性能降低
	
	

	