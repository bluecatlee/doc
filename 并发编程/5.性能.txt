线程的最主要目的是提升性能
提升性能始终要把安全性放在第一位，否则反而会造成新的性能问题。
相对于单线程，多线程引入了线程，也就引入了额外的开销：
	线程的创建和销毁
	切换线程的上下文切换
	线程的调度
	线程之间的协调(加锁、触发信号以及内存同步等)
	
可伸缩性	
	当增加计算机资源时(CPU、内存、磁盘空间、I/O带宽等)，程序的吞吐量或者处理能力能相应的增加
	
Amdahl定律
	阿姆达尔定律：
		在增加计算资源的情况下，程序在理论上能够实现的最高加速比，取决于程序中可并行组件与串行组件所占的比重。
		即：单纯的增加处理器数量不一定有用，只有任务是并行的或者说并行占比越大时才有意义。
		
减少锁的竞争
	减少锁的持有时间
		锁中不要有耗时操作，锁的范围尽量缩小(不影响原子性的前提下)
	降低锁的请求频率
		减小锁的粒度，但是会增加死锁的风险
			锁分解：一个锁分解为多个锁，可能会降低一个锁的竞争程度。不同对象由不同的锁去保护
			锁分段：保护的是同一个对象的不同部分。ConcurrentHashMap使用了一个包含了16个锁的数组，每个锁保护所有散列桶的1/16
			
	热点域的缓存
		一些反复计算的结果缓存起来，避免大量重复操作。但是会限制可伸缩性
		
	使用带协调机制的独占锁
		ReadWriteLock：读操作可以共享资源，写操作必须加锁。适用于读多的场景
		。。
		
	替代方案
		不用锁，如并发容器(当然底层还是锁)，不可变对象，原子变量
		
		