创建操作符
	just()		将一个或多个对象转换成发射这个或这些对象的一个Observable
				类似from(),from会将数组或Iterable数据取出然后逐个发射，just只是简单的原样发射，数组或者Iterable会被当成单个数据。
	
	from()		将一个Iterable、一个Future或者一个数组转换成一个Observable
	
	create()	使用一个函数从头创建一个Observable
				一个形式正确的有限Observable必须尝试调用观察者的onComplete()一次或者它的onError()一次，而且此后不再调用观察者的任何其他方法。
				
	defer()		只有当订阅者订阅才创建Observable，为每个订阅创建一个新的Observable
	range()		创建一个发射指定范围的整数序列的Observable
	interval()	创建一个按照给定时间间隔发射整数序列的Observable，无限递增。interval默认在computation调度器上执行
	timer()		创建一个在给定的延迟之后发射单个数据的Observable。timer默认在computation调度器上执行
	empty()		创建一个什么都不做直接通知完成的Observable
	error()		创建一个什么都不做直接通知错误的Observable
	nerver()	创建一个不发射任何数据的Observable
	

repeat	重复发射原始Observable的数据序列，可以指定重复次数
repeatWhen 不是缓存和重放原始Observable的数据序列，而是有条件的重新订阅和发射原来的Observable
repeatUntil 直到某个条件就不再重复发射数据
		

变换操作符
	map()		对序列的每一项都用一个函数来变换Observable发射的数据序列
	flatMap()
	concatMap()
	flatMapIterable()	将Observable发射的数据集合转变为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable中
	switchMap()			将Observable发射的数据集合转变为Observables集合，然后只发射这些Observables最近发射过的数据
	scan()		对Observable发射的每一项数据应用一个函数，然后按顺序发射
	groupBy()	将Observable拆分为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射过一组不同的数据
	buffer()	定期从Observable收集数据到一个集合，然后把数据集合打包发射，而不是一次发射一个
	window()	定期将来自Observable的数据拆分成一些Observable窗口，然后发射这些窗口，而不是每次发射一项
	cast()		在发射之前强制将Observable发射的所有数据转换为指定类型
	
过滤操作符
	filter()		过滤数据
	takeLast()		只发射最后N项数据
	last()			只发射最后一项数据
	lastOrDefault()	只发射最后一项数据,如果Observable为空，则发射默认值
	takeLastBuffer() 将最后的N项数据当做单个数据发射
	skip()			跳过开始的N项数据
	skipLast()		跳过最后的N项数据
	take()			只发射开始的N项数据
	first()
	takeFirst()		只发射第一项数据，或者满足某种条件的第一项数据
	firstOrDefault() 只发射第一项数据，如果Observable为空则发射默认值
	elementAt()		发射第N项数据
	elementAtOrDefault() 发射第N项数据，如果Observable为空则发射默认值
	sample()
	throttleLast()	定期发射Observable最近的数据
	throttleWithTimeout()   
	debounec()		只有当Observable在指定的时间段后还没发射数据时，才发射一个数据
	timeout()		在指定时间还没有发射一个数据则发射一个异常
	distinct()		过滤掉重复的数据
	distinctUntilChanged()	过滤掉连续重复的数据
	ofType()		只发射指定类型的数据
	ignoreElements()	丢弃所有的正常数据，只发射错误或完成通知
	
条件操作符
	amb()			给定多个Observable，只让第一个发射数据的Observable发射全部数据
	defaultEmpty()	发射来自原始Observable的数据，如果原始Observable没有发射数据，则会发射一个默认数据
	skipUntil()		丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据
	skipWhile()		丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable的剩余数据
	takeUntil()		发射来自原始Observable的数据，直到第二个Observable发射了一个数据或通知
	takeWhile()
	takeWhileWithIndex()	发射原始Observable数据，直到一个特定的条件为真，然后跳过剩余的数据
	
布尔操作符
	all()		判断是否所有的数据项都满足某个条件
	contains()	判断Observale是否会发射一个指定的值
	exists() isEmpty()	判断一个Observable是否发射了一个值
	sequenceEqual()	判断两个Observables发射的序列是否相等
	
合并操作符
	startWith()		在数据序列的开头增加一项数据
	merge()			将多个Observable合并为一个
	mergeDelayError()	合并多个Observable，让没有错误的Observable都完成后再发送错误通知
	zip()			使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果
	combineLatest()	当两个Observable中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据(一共两个数据),然后发射这个函数的结果
	join()
	groupJoin()		无论何时，如果一个Observable发射了一个数据项，就需要在另一个Observable发射的数据项定义的时间窗口内，将两个Observable发射的数据合并发射
	switchOnNext()	将一个发射Observable的Observable转换成另一个Observable，后者发送这些Observable最近发射的数据	

连接操作符	
	ConnectableObservable.connect()		指示一个可连接的Observable开始发射数据
	Observable.publish()				将一个Observable转换为一个可连接的Observable
	Observable.replay()					确保所有的订阅者看到相同的数据序列时，即时他们在Observable开始发射数据之后才订阅
	ConnectableObservable.refCount()	让一个可连接的Observable表现得像一个普通的Observable
	
	
	
	
	
