响应式编程Reactive Programming，RP
	一种面向数据流和变化传播的编程范式。
	
	特点
		异步编程
		基于数据流模型，支持静态数据流和动态数据流，允许复用和接入多个订阅者 (Java8 Stream只支持静态数据流)
		变化传播
		
函数式编程Functional Programming，FP
	面向过程的程序设计，并且更接近数学计算
	函数式编程中，数据是不可变的，没有并发编程的问题。一定程度上可以代替并发编程。
	
	特点
		函数本身就是一种类型，可以赋值给变量，可以传给另一个函数，或者作为别的函数的返回值
		闭包：起函数的作用并可以像对象一样操作的对象。
		高阶函数：可以用另一个函数作为输入参数，可以返回一个函数作为输出结果
		递归
		惰性求值：抵消相同项避免执行无用代码，可以构造一个无限的数据类型且不会由于无穷计算导致内存溢出
		没有副作用：函数本身只返回结果，不会修改外部变量的值(对于对象，不会修改其地址值)
		
函数响应式编程Functional Reactive Programming， FRP
	函数式编程和响应式编程的结合
	响应式编程通过函数式编程解决回调地狱的问题。
	
==================================================================================================================================
RxJava
	Reactive Extensions的Java实现，用于通过使用Observable/Flowable序列来构建异步和基于事件的程序的库。
	RxJava扩展了观察者模式以支持数据/事件序列，允许以声明方式组合序列的操作符，同时隐藏了线程、同步、并发等问题。
	操作异步事件流/数据流就像操作集合一样
	
	Rx = Observables + LINQ + Schedulers
	
	Java的Future用于单一层面的异步执行比较方便，但是在需要异步嵌套执行时使用起来很复杂，难以构建有条件的异步执行流。Java 8 之后新增了CompletableFuture弥补原先Future的问题。
	
	
	
五种观察者模式
	Observable和Observer	能够发射0或n个数据，并以成功或错误事件终止
	Flowable				能够发射0或n个数据，并以成功或错误事件终止。支持背压，可以控制数据源发射的速度
	Single					只能发射单个数据或错误事件
	Completable				从来不发射数据，只处理onComplete和onError事件。可以看成Rx的Runnable
	Maybe					能够发射0或1个数据，要么成功要么失败。类似Optional
	
	
	
====================================================================================================================================
Java9新特性
	模块化Module System
	增加了Reactive Streams API，并改进了原有的Stream API、Completable API 
	JSON API轻量级支持
	JShell
	接口中的私有方法
	Linking
	HTTP 2 Client	
	...
	
RxJava从2.1.3版本开始支持Java9	