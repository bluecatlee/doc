OSI模型
	应用层		HTTP SMTP IMAP等
	表示层		加密解密等
	会话层		通信连接/维持会话
	传输层		TCP/UDP
	网络层		IP
	链路层		网络特有的链路接口
	物理层		网络物理硬件
	
TCP是面向连接的协议，传输之前需要三次握手形成会话。
创建会话的过程中。服务端与客户端分别提供一个套接字，这两个套接字共同形成一个连接。通过套接字来实现两者之间连接。

TCP针对网络中小数据包的优化策略：Nagle算法
Node中默认启用了Nagle算法
一端使用write方法之后会触发另一端的data事件 如果使用了Nagle算法 会使用缓冲区暂存数据包 到一定数量或一定时间之后再发送，避免小数据包频繁发送，但是会造成延迟。	

UDP不是面向连接的。一个套接字可以与多个UDP服务通信。DNS就是基于UDP实现的
UDP套接字创建之后，既可以作为客户端发送数据，也可以作为服务端接收数据

TCP服务以connection为单位进行服务，HTTP以request为单位进行服务
开启keeplive后，一个TCP会话可以用于多次http请求和响应

WebSocket协议，客户端与服务端只建立一个TCP连接，服务端可以主动推送数据到客户端。比HTTP中的请求响应模型更灵活，WebSocket能够双向通信
WebSocket是在TCP上定义的独立的协议，不是在HTTP上实现的。
WebSocket的握手部分是通过HTTP完成的


具体使用net dgram http https ws模块
node的http模块包含一个默认的客户端代理对象http.globalAgent，且默认的连接数限制为5。就是客户端请求默认受到连接池管理，最大并发请求数为5.


网络安全
	TLS/SSL
		SSL：安全套接层。对网络连接加密，在应用层之前。
		TLS：安全层传输协议。对SSL的标准化
	
		非对称秘钥。公钥进行加密，私钥进行解密。客户端与服务端都持有对方的公钥。
					需要有交换公钥的过程，但是交换公钥的过程可能会遭到中间人攻击。这就需要数字证书的认证。或者公钥以另一种安全的方式交换
		
		数字证书。CA(数字证书认证中心)作为第三方，可以颁发证书。CA会将自身的签名数据加入到证书中。
				  如何获取数字证书？
					服务端用自己的私钥生成csr文件(证书签名请求文件)，ca机构通过这个文件生成对应的证书。只要通过CA机构就能验证证书是否合法
					生成csr时需要包含自己服务器的域名等信息
				  CA机构颁发证书繁琐怎么办？
					自签名证书。自己扮演CA机构，给自己的服务器颁发签名证书。
				  客户端发起安全连接前会获取服务器证书，并去CA验证证书真伪，验证服务器名称、IP等
			      浏览器一般预装了知名CA机构的证书，CA的证书也叫根证书
				  证书会一级一级验证，因为每一级证书都会有上一级证书的签名，直到根证书。
				  
	HTTPS
		工作在TLS/SSL上的HTTP
		