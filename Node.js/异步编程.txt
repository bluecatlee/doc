异步编程的难点
	1.异常处理
		异步方法上使用try/catch并不会捕获回调函数执行抛出的异常
		将异常作为回调函数的第一个实参传回，如果为空值，表明异步调用没有异常抛出
		不要对回调函数try/catch, 避免回调函数被执行两次
		
	2.函数嵌套过深
		
	3.阻塞代码
		没有sleep线程睡眠这样的功能，可以通过空循环实现(不推荐，浪费CPU)，推荐使用setTimeout
		
	4.多线程编程
		child_process和cluster
		
	5.异步转同步
		有时候需要同步反而缺少原生同步API的支持
		
		
事件发布/订阅模式
	回调函数事件化。
	Node的events模块就是发布订阅模式的一个简单实现，
	比浏览器中的DOM事件简单，不存在事件冒泡，不存在preventDefault() stopPropagation() stopImmediatePropogation()等控制事件传递的方法。
	
	Node的核心模块中有半数继承了events模块，通过util模块的inherits方法可以继承
	once()方法可以使侦听器(回调函数)只执行一次
	
	..
	
Promise/Deferred模式
	【侧重于封装异步的调用部分】
	【回调函数一定程度上使得函数的return和throw功能丧失】
	Promise：传递异步操作的消息。3种状态：Pending进行中/未完成态，Resolved/Fulfilled已完成/完成态，Rejected已失败/失败态
			 Promise无法取消，一旦新建就会立即执行。所以一般会包在一个函数中，需要时去调用这个函数。
			 Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 方法和 reject 方法
			 如果异步操作成功，则用 resolve 方法将 Promise 对象的状态，从「未完成」变为「成功」（即从 pending 变为 resolved）；
			 如果异步操作失败，则用 reject 方法将 Promise 对象的状态，从「未完成」变为「失败」（即从 pending 变为 rejected）。

			 
	Deferred：延迟对象
	Promise通过封装异步调用，实现了success和error的分离以及逻辑处理延迟，使得回调函数相对优雅。
	
	Deferred是Node实现同步的一个方式
	
流程控制库	
	【侧重于异步执行结果的保存以及回调函数的注入】
	尾触发与next
	async
		series()方法实现一组任务的串行执行，无依赖的异步串行执行
		parallel()方法并行执行异步操作
		waterfall()有依赖的异步串行执行
		auto()自动
	Step
		