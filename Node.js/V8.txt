Node使用V8作为Node的js脚本引擎

V8内存限制
	由于垃圾回收机制，使用内存越多，每次全量的垃圾回收时间将会越长。
	考虑到V8最初是为浏览器设计，浏览器不需要太大的内存，所以V8的内存限制是合理的。
	但Node使用V8，限制了Node的服务端能力。【可以通过stream流式操作和Buffer堆外内存解决】
	
垃圾回收机制
	对象分配在堆内存，内存分代，新生代使用复制算法，老年代使用标记清除和标记整理
	V8中同样存在STW
	
作用域
	函数调用
	with
	全局作用域
	
	变量的查找是按作用域链依次向上查找知道全局作用域
	全局变量属于全局作用域，其对象会常驻内存，随着node进程退出才能释放。所以尽量不用全局变量，尽量不用了之后使用delete操作或者给全局变量重新赋值undefined来主动释放。
	
闭包closure
	实现外部作用域访问内部作用域中的变量的方法叫做闭包，它利用了高阶函数的特性：函数可以作为参数或者返回值
	闭包也是无法立即回收的，使用闭包要谨慎
	
堆外内存Buffer
	node用Buffer来突破V8的内存限制问题，但是堆外内存如何回收？
	
内存泄漏的主要原因
	将进程内存作为缓存使用且使用不当
	队列生产的速度大于消费的速度
	其他作用域未释放的情况