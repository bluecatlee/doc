包实际上是一个存档文件，即一个目录打包为.zip或tar.gz格式的文件。

包结构
	package.json		包描述文件
	bin					存放可执行二进制文件的目录
	lib					存放js代码的目录
	doc					存放文档的目录
	test				存放单元测试的目录
	
包描述文件package.json
	--必须字段--
	name				包名。小写字母和数字，允许.-_ 不允许空格
	description			包简介
	version				语义化的版本号 通常为major.minor.revision格式
	keywords			关键词数组，用于搜索
	maintainers			包维护者列表。每个维护着由name email web3个属性组成。npm通过该属性进行权限验证
	contributors		贡献者列表
	bugs				反馈bug的地址
	licenses			当前包使用的许可证列表
	repositories		托管源代码的位置列表
	dependencies		当前包所需要的位置列表，npm会通过这个属性自动加载依赖的包
	--可选字段--
	homepage			当前包的网站地址
	os					支持的操作系统列表
	cpu					支持的cpu架构列表
	engine				支持的js引擎列表
	builtin				标志当前包是否是内建在底层系统的标准组件
	directories			包目录说明
	implements			实现规范的列表 标志当前包实现了CommonJS的哪些规范
	scripts				脚本说明对象
	--NPM比CommonJS包规范多出的几个字段--
	author				作者
	bin					可以将包作为命令行工具使用。配置好bin之后，通过npm install package_name命令可以将脚本添加到可执行路径中
	main				模块引入方法require()在引入包时会优先检查这个字段，并将其作为包中其余模块的人口
						如果不存在这个字段，require()方法会优先查找包目录下的index.js、index.node、index.json文件作为入口
	devDependencies		开发时所需依赖

NPM常用功能
	NPM是管理、安装node模块/包的工具，是CommonJS包规范的一个实现，node.js内置了npm
	
	查看帮助			npm			
	查看版本			npm -v 		
	安装依赖包 			npm install express 
							npm会在当前目录下创建node_modules目录，然后在node_modules目录下创建express目录，并将包解压到这个目录下
							安装好依赖后，通过require('express')引入该包
							
							-g 全局模式，将一个包安装成一个全局可用的可执行命令。不是将一个包安装成全局包，不是在任意地方都可以使用require()来引用到它
							--registry=''	通过非官方源的其他镜像源安装
							
							--save		会在dependencies下添加对应的依赖
							--save-dev  会在devDependencies下添加对应的依赖
							
							
	钩子命令			package.json中的scripts字段就是提供了钩子
	初始化				npm init，以交互式的方式生成package.json包描述文件
	注册包仓库账号		npm adduser
	上传包				npm publish <folder>    npm会将目录打包成一个存档文件，然后上传到官方仓库中
	管理包权限			npm owner ls <package_name>				查看包的拥有者
						npm owner add <user> <package_name>		添加包的拥有者
						npm owner rm <user> <package_name>		删除包的拥有者
	分析包				npm ls 分析当前路径下能够通过模块路径找到的所有包，并生成依赖树，以此来判断require()能否引入某个包					
						
局域NPM
	
前后端共用模块
	AMD规范 Asynchronous Module Definition	异步模块定义
		
	CMD规范