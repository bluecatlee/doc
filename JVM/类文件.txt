字节码(.class文件)和jvm是java跨平台的基石
其他语言也可编译成.class在jvm上运行
任何一个Class文件都对应着一个唯一一个类或接口的定义信息，反之不成立
javap可以分析字节码内容

【Class类文件的结构】
	以8位字节为基础的二进制流 中间没有任何分隔符 
	
	无符号数：
		基本数据类型 以u1 u2 u4 u8来代表1个字节 2个字节 4个字节 8个字节的无符号数。
		用来描述数字、索引引用、数量值或者按照utf-8编码构成的字符串值
	表：
		由多个无符号数护着其他表作为数据项构成的复合数据类型。所有表习惯性以_info结尾
		
	----------------------------------------
	魔数Magic Number
		Class文件的前4个字节。用于确定这个文件是否是一个能被虚拟机接受的Class文件。 0xCAFEBABE  u4
	次版本号Minor Version： 第5第6个字节  u2
	主版本号Major Version:  第7第8个字节  u2  (虚拟机拒绝执行超过其版本号的Class文件)
	常量池Constant Pool:
		常量池容量计数值u2
		常量池cp_info 数量不固定 由常量池容量计数值指定大小
			常量池中主要存放字面量(文本字符串 final变量值)和符号引用(类和接口的全限定名、字段名称和描述符、方法名称和描述符)
			常量池中每一项常量都是一个表 每个表第一位是u1类型的标志位(代表常量类型) 
	访问标志access_flags u2		
	类索引this_class、父索引super_class与接口索引interfaces集合
	字段表field_info
		字段包括类级变量和实例变量 不包括方法内部的局部变量 不包括继承来的字段 可能有编译器自动添加的字段
		
		全限定名	带包名全称
		简单名称	如数组用[表示 String[][]的二维数组记为[[Ljava/lang/String  int[]记为[I
	方法表method_info	
		如果没有重写父方法 则不会包括父方法。有编译器自动添加的方法 比如类构造器和实例构造器
	属性表attribute_info
		1.Code属性：方法体中的代码编译后的字节码指令
			局部变量表中会存一个指向当前对象实例的变量(this的实现)
		2.Exceptions属性
			表示方法中可能抛出的受检异常(checked exceptions，即throws关键字后列出的异常，不是异常表)
		3.LineNumberTable属性
			描述java源码行号和字节码行号(字节码偏移量)之间的对应关系，如果不设置，无法debug且抛出异常时堆栈中无法显示出错的行号
		4.LocalVariableTable属性
			描述栈帧中局部变量表中的变量与java源码中定义的变量之间的关系，
			如果不设置，他人引用这个方法时 会丢失参数名称，ide会使用arg0 arg1 var1这类的占位符替代原有的参数名
		5.SourceFile属性
			记录生成这个Class文件的源码文件名称，如果不记录  内部类抛出异常时将不会显示出错代码所属的文件名
		6.ConstantValue属性
			通知虚拟机自动为静态变量赋值 只有static关键字修饰的变量(类变量)才能使用这项属性
			如果变量是static且final的 且类型是String的话 就生成ContantValue属性进行初始化，如果只是static 则会在类构造器方法中进行初始化；
			对于非static变量的初始化是在实力构造器中
		7.InnerrClasses属性
			记录内部类与宿主类之间的关联
		8.Deprecated和Synthetic属性	
			Deprecated表示某个类、方法、字段过时 可以在代码中使用@Deprecated注解进行设置
			Synthetic表示此字段或方法不是java源码中的 是编译器自行添加的(除了类构造器和实例构造器)
		9.StackMapTable属性
			类加载的验证阶段被新类型检查验证器使用
		10.Signature属性
			类 方法 字段的签名 可以记录泛型类型
			java的泛型是采用擦除法实现的伪泛型 在Code属性中是不包含泛型信息的 无法在运行时通过反射获取到泛型信息 Signature属性可以解决这个问题
		11.BootstrapMethods属性
			保存invokedynamic指令引用的引导方法限定符
			
################################################################################################################################################################################
【字节码指令】			
	指令是由一个字节长度的代表着某种特定操作的数字以及操作所需参数构成的 (操作码的长度是一个字节 指令集的操作码总数不能超过256个)
	jvm是面向操作数栈而不是寄存器的架构
	
	有些对于不同数据类型的同类操作 会有不同的字节码指令，有些操作码则是类型无关的
	
	加载和存储指令
		将数据在栈帧的局部变量和操作数栈之间来回传输
	运算指令
	类型转换指令
	对象创建与访问指令	
		创建类实例的指令：new
		创建数组的指令：newarray anewarray multinewarray
		访问字段的指令：getfield putfield getstatic putstatic
		检查类实例类型的指令：instanceof checkcast
	操作数栈管理指令
		栈顶元素出栈：pop pop2
	控制转移指令
	方法调用和返回指令	
	异常处理指令 许多运行时异常是jvm指令检测到异常时自动抛出的 如ArithmeticException
				 catch语句不是指令完成的 是采用异常表完成的
	同步指令
		synchronized语句块是monitorenter monitorexit指令支持的
	
