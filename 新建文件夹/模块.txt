模块
	一个文件就是一个模块
	
	__filename	当前模块的文件名，是绝对路径（符号链接会被解析）
	__dirname 	当前模块的目录名，相当于path.dirname(__filename)、
	exports		对于module.exports的更简短的引用形式，用于指定一个模块所导出的内容。exports是module.exports的一个引用  【如果要导出一个类或对象，必须使用module.exports】
	module    	对当前模块的引用
	
	
			
require
	require(id)  		  引入模块或者json文件，会解析路径并加载模块，返回该模块被导出的内容 module.exports
						  可以从node_modules引入模块，也可以使用相对路径引入本地模块或json文件
						  
	require.cache		  被引入的模块将缓存在这个对象中。下次引入将直接从缓存中获取。 可以直接操作缓存，设置同名key以及对应的值，来替换原生模块的实现				  
	require.main		  返回nodejs进程启动时的入口模块
						  require.main.filename获取入口文件名
						  require.main === module 判断一个文件是否被直接运行(判断入口是不是当前模块)
						  
	require.resolve(request[, options])		解析模块的全路径 但不加载
	require.resolve.paths(request)			返回被查询解析路径的模块的路径的数组
	
	
module对象	
	在每个模块中， module 的自由变量是对表示当前模块的对象的引用，由node自动创建
	module 实际上不是全局的，而是每个模块本地的
	
	module.children		被该模块引用的模块对象
	module.exports			
						exports 变量是在模块的文件级作用域内可用的，且在模块执行之前赋值给 module.exports
						直接使用exports是一种快捷方式
	module.filename		模块的完全解析后的文件名					
	module.id			模块的标识符，通常是完全解析后的文件名
	module.loaded		模块是否已经加载完成或者正在加载中
	module.parent		最先引用该模块的模块
	module.paths		模块的搜索路径
	module.require(id)	提供了一种加载模块的方法
	
	
Module对象	
	可以理解为对module的更高级抽象
	通过require('module')获取
	
	require('module').builtinModules			返回一个数组，列出所有内置模块名称
	require('module').createRequire(filename)	用于构造 require 函数的文件名