DataSource 数据源
	Connection getConnection() throws SQLException;
	Connection getConnection(String username, String password) throws SQLException;
	
AbstractDataSource implements DataSource
	数据源顶级抽象父类
	扩展了登录超时的设置与获取 日志写入器的设置与获取 包装数据源的方法 具体由子类实现
	
	
Connection 数据库连接
	// 创建语句
	Statement createStatement() throws SQLException;
	Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;
	Statement createStatement(int resultSetType, int resultSetConcurrency,int resultSetHoldability) throws SQLException;
	// 创建预编译语句
	PreparedStatement prepareStatement(String sql) throws SQLException;
	PreparedStatement prepareStatement(String sql, int resultSetType,int resultSetConcurrency) throws SQLException;
	PreparedStatement prepareStatement(String sql, int resultSetType,int resultSetConcurrency, int resultSetHoldability)throws SQLException;
	PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)throws SQLException;
	PreparedStatement prepareStatement(String sql, int columnIndexes[])throws SQLException;
	PreparedStatement prepareStatement(String sql, String columnNames[])throws SQLException;
	// 调用存储过程
	CallableStatement prepareCall(String sql) throws SQLException;
	CallableStatement prepareCall(String sql, int resultSetType,int resultSetConcurrency) throws SQLException;
	CallableStatement prepareCall(String sql, int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException;
	
	// 转成原生sql格式
	String nativeSQL(String sql) throws SQLException;
	
	// 设置自动提交
	// 如果连接是自动提交模式，则所有的sql语句会以独立的事务执行、提交。否则所有的语句在一个事务中，在调用commit或callback方法后结束该事务。
	void setAutoCommit(boolean autoCommit) throws SQLException;
	// 查看自动提交模式
	boolean getAutoCommit() throws SQLException;
	
	// 提交 
	// 非自动提交模式下使用
	// 会提交自上次commit/rollback以来的数据变动，并且会释放当前连接持有的所有锁
	void commit() throws SQLException;
	// 回滚
	// 非自动提交模式下使用
	// 回滚当前事务的所有操作，并且会释放当前连接持有的所有锁
	void rollback() throws SQLException;
	// 回滚到保存点
	// 非自动提交模式下使用
	void rollback(Savepoint savepoint) throws SQLException;
	
	// 立即关闭连接并释放资源
	void close() throws SQLException;
	// 连接是否关闭 不能作为判断连接是否有效的依据 
	// 所有操作都是可以捕获异常的 以是否有相应异常来判断连接是否有效
	boolean isClosed() throws SQLException;
	
	// 获取元数据
	// 包括表、支持的sql语法、存储过程、连接本身的信息等
	DatabaseMetaData getMetaData() throws SQLException;
	
	// 设为只读
	// 不能在事务中设置
	void setReadOnly(boolean readOnly) throws SQLException;
	boolean isReadOnly() throws SQLException;
	
	int TRANSACTION_NONE             = 0;
	int TRANSACTION_READ_UNCOMMITTED = 1;
	int TRANSACTION_READ_COMMITTED   = 2;
	int TRANSACTION_REPEATABLE_READ  = 4;
	int TRANSACTION_SERIALIZABLE     = 8;
	
	// 设置事务的隔离级别
	void setTransactionIsolation(int level) throws SQLException;
	int getTransactionIsolation() throws SQLException;
	
	SQLWarning getWarnings() throws SQLException;
	void clearWarnings() throws SQLException;
	
	// 类型映射吧
	Map<String,Class<?>> getTypeMap() throws SQLException;
	void setTypeMap(Map<String,Class<?>> map) throws SQLException;
	
	void setHoldability(int holdability) throws SQLException;
	int getHoldability() throws SQLException;
	
	// 在当前事务创建一个匿名保存点
	// 如果在事务外调用，则会创建一个新的事务
	Savepoint setSavepoint() throws SQLException;
	Savepoint setSavepoint(String name) throws SQLException;
	// 释放保存点
	void releaseSavepoint(Savepoint savepoint) throws SQLException;
	
	Clob createClob() throws SQLException;
	Blob createBlob() throws SQLException;
	NClob createNClob() throws SQLException;
	SQLXML createSQLXML() throws SQLException;
	
	boolean isValid(int timeout) throws SQLException;
	
	void abort(Executor executor) throws SQLException;
	
Statement 语句
	int CLOSE_CURRENT_RESULT = 1;
    int KEEP_CURRENT_RESULT = 2;
    int CLOSE_ALL_RESULTS = 3;
    int SUCCESS_NO_INFO = -2;
    int EXECUTE_FAILED = -3;
    int RETURN_GENERATED_KEYS = 1;		// 自动生成主键
    int NO_GENERATED_KEYS = 2;			// 不自动生成主键
	
	
...	
	
	