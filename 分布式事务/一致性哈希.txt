【哈希算法】
	散列：将任意长度的输入变换成固定长度的输出，该输出就是散列值
	是一种压缩映射 不同的输入可能会散列成相同的输出
	
	
	负载因子
	
	哈希冲突/哈希碰撞
		解决冲突：
			1）线性探查法
			2）双散列函数法
	
	哈希桶
	
【一致性哈希】
		一般的取模算法是对服务器数量进行取模 当改变服务器数量时会造成缓存失效 大批量的缓存在同一时间失效可能导致缓存雪崩
		
		一致性哈希也是取模 但是是对2^32进行取模
		哈希值空间则为0-2^32-1 2^32是java中无符号整形的最大值 
		
		所有值组成一个Hash环
		
		对服务器ip进行hash 值在hash环上的位置即表示该服务器
		对数据key进行hash 值在hash环上的位置顺时针找到的第一个服务器就是该数据存储的服务器
		
		当服务器数量变动时 受影响的数据将会变少
		
		数据倾斜问题
			服务器节点过少 在hash环上的分布不均匀 
			解决： 使用虚拟服务节点 凭空为某个服务器多增加几个节点
			       实际应用中 一般虚拟节点数设置为32个