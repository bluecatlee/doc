#redis-sentinal.conf配置文件说明
#哨兵也是redis实例


#绑定监听的地址
# bind 127.0.0.1 192.168.1.1

#保护模式
# protected-mode no

#指定哨兵监听的端口
port 26379

#指示自身的实际ip port (NAT下或者有端口转发的情况下有用)
# sentinel announce-ip <ip>
# sentinel announce-port <port>

#工作目录
dir /tmp

#哨兵要监控的master节点信息
#sentinel monitor <master-name> <ip> <redis-port> <quorum>
#一个哨兵节点检测到master节点下线 此时是一个主观下线的状态 需要满足quorum个哨兵节点都认为master节点主观下线 才能变成客观下线
#quorum 法人数，表示认为某个master节点客观下线需要的哨兵节点数
#哨兵中需要选举出一个，满足过半条件的哨兵主导故障转移
#哨兵的配置中不需要指定slave节点，因为slave节点可以自动发现。哨兵会自动重写当前配置文件来添加slave的相关信息
#master-name自定义，不能包含特殊字符 支持[A-z0-9.-_]
#这个地址要写真实地址 而不是回环地址
sentinel monitor mymaster 127.0.0.1 6379 2

#设置哨兵访问master和slaves的密码
#master的密码也会被应用在slave上
#如果master slaves中应用了不同的密码 master切换后可能会失效
#sentinel auth-pass <master-name> <password>
# sentinel auth-pass mymaster MySUPER--secret-0123passw0rd

#节点被认为挂掉/不可用的超时时间 包括master slave和哨兵节点
sentinel down-after-milliseconds mymaster 30000

#在发生failover主备切换时最多可以有多少个slave同时对新的master进行并行同步
# sentinel parallel-syncs <master-name> <numslaves>
sentinel parallel-syncs mymaster 1

#主备切换的超时时间 默认3分钟
sentinel failover-timeout mymaster 180000

#定义通知脚本
#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，
#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。
#调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。
#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。
# sentinel notification-script mymaster /var/redis/notify.sh

#当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。以下参数将会在调用脚本时传给脚本:
#<master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
#目前<state>总是“failover”, <role>是“leader”或者“observer”中的一个。 
#参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的。
#这个脚本应该是通用的，能被多次调用，不是针对性的。
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh

#日志
logfile /var/log/redis/sentinel.log
