#redis.conf配置文件说明

#-----------------------------------------------------包含---------------------------------------------------------------------------------#
#包含的配置文件
#include指令不会被admin或哨兵发送的'CONFIG REWRITE'命令重写
#include指令中包含的外部配置文件中的指令，根据其所在位置的不同，可能会被重写，因为redis按顺序读取配置项，后读取到的配置会覆盖前面的。
# include /path/to/local.conf


#------------------------------------------------------网络--------------------------------------------------------------------------------#
#bind指令如果没有配置，redis会监听所有网络
#bind 127.0.0.1

#保护模式
#要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。要是开启了密码和bind，可以开启。
protected-mode no

#监听端口 如果设为0则不会侦听TCP套接字
port 6379

#tcp积压数
#此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。
#当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说不够。
#一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p
tcp-backlog 511

#指定用于监听连接的socket文件 不指定则不会使用unix socket
# unixsocket /tmp/redis.sock
# unixsocketperm 700

#超时时间
#客户端的空闲时间超出指定时间之后 服务器会断开连接 (0表示不超时)
timeout 0

#tcp keepalive  单位秒
#如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。
#在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值
tcp-keepalive 300


#------------------------------------------------------通用--------------------------------------------------------------------------------#
#是否后台运行
#如果后台运行会写一个pid文件：默认/var/run/redis.pid
daemonize no

#如果从upstart或systemd运行Redis，Redis可以与监控树交互
supervised no

#pid文件
#如果指定了pid文件 redis会在启动停止的时候写入
#如果以非后台方式运行且未指定pid文件 则不会创建
#如果以后台方式运行且未指定pid文件，也会创建它，默认/var/run/redis.pid
pidfile /usr/local/redis/redis.pid

#日志级别 debug-verbose-notice-warning
loglevel notice

#日志文件 
#为空表示输出到标准输出
#如果以daemon方式运行且输出到标准输出，则会实际输出到/dev/null
logfile ""

#启用系统日志Syslog
# syslog-enabled no

# 指定syslog标识
# syslog-ident redis

# 指定syslog设施 必须是USER或者在LOCAL0-LOCAL7之间
# syslog-facility local0

#设置数据库数量.
#客户端连接之后默认选择的数据库是0，通过select [n]命令切换
databases 16

#是否总是显示logo  redis4.x特性
always-show-logo yes


#------------------------------------------------------快照--------------------------------------------------------------------------------#
#rdb备份策略
#默认900s内有一个key执行了写操作
#或者300s内有10个key执行了写操作
#或者60s内有10000个key执行了写操作
#就会触发rdb备份 
#设置成save "" 可以清除之前设置的所有保存点 
save 900 1
save 300 10
save 60 10000

#如果设置了rbd备份策略且最近一次rdb备份失败，redis默认将不能写入新数据，用来提醒用户数据不能正确持久化到硬盘
#如果rdb备份恢复正常执行，则会自动允许写入
stop-writes-on-bgsave-error yes

#rdb备份时对字符串进行压缩(LZF) 稍微影响cpu性能但是节省磁盘空间
rdbcompression yes

#版本5开始，rdb备份文件之后会加上CRC64校验和，可以判断备份文件是否损坏。 
rdbchecksum yes

#rdb文件的名字
dbfilename dump.rdb

#指定工作目录 rdb aof文件都会写到这个目录下
dir ./


#-----------------------------------------------------复制---------------------------------------------------------------------------------#
#主从复制
#1）复制是异步的 但是可以配置如果有slave无法连接时，master就无法写入 (强一致性，牺牲了可用性)
#2）从服务器可以执行部分的重新同步操作来处理主从连接断开的期间内的数据，可以设置数据积压到一定大小之后再同步到slave
#3）复制是自动的 发生网络分区后 slave会尝试自动连接master并且重新同步数据

#指定作为某个redis服务器的从服务器
# slaveof <masterip> <masterport>

#如果master使用了密码保护(即配置了requirepass)，slave需要对应配置认证的密码
# masterauth <master-password>

#如果slave与master断开连接 设置slave是否继续对外提供服务 yes表示可以 但是数据将不一致
slave-serve-stale-data yes

#slave是否只读
#只读不是做安全保护的，而是防止slave被错误使用，slave暴露在外网依旧不安全。
#如果slave可写 写入的数据只会临时短暂的存在 因为下一次复制操作导致这部分数据被删除
slave-read-only yes

#新加入的slave或重启/重新恢复的slave不能继续进行复制操作，需要进行一次全量同步
#同步策略：
#	1）Disk-backed：maste创建一个新的进程将数据写到rdb文件，然后父进程将rdb文件传输给slave
					当文件创建好之后，rdb文件可以传给多个slave
#	2）Diskless：master创建一个新的进程直接将rdb文件写给slave sockets。带宽高的情况下考虑Diskless
				 如果同步已经开始，新的slave加入时，会被阻塞直到当前同步结束，然后重新开始一次同步给新的slave
				 可能存在多个slave需要同步，这种模式下可以设定等待一定时间再开始进行同步 (repl-diskless-sync-delay)
				 
#同步策略
repl-diskless-sync no

#Diskless同步策略下 master开始同步前的延迟时间
repl-diskless-sync-delay 5

#slave ping master的时间间隔
# repl-ping-slave-period 10

#复制的超时时间
#包括SYNC、从master到slave 从slave到master的超时
#确保超时时间大于ping的间隔时间
# repl-timeout 60

#是否在slave socket上禁用TCP_NODELAY
#TCP_NODELAY就是数据包不会合并成大的发送，意味着会有很多小的包，相对来说占用带宽少
#默认不禁用 占点带宽 
repl-disable-tcp-nodelay no

#设置复制缓冲区的大小 
#如果slave无法连接了 master会把数据暂时存在复制缓冲区中，如果slave恢复了，就可以将缓冲区的数据给slave，不需要全量同步
# repl-backlog-size 1mb

#复制缓冲区的存活时间 0表示永不释放缓冲区
# repl-backlog-ttl 3600

#slave优先级
#如果master挂了 哨兵重新选举 将slave选举为master时 会按照优先级 低的优先级高 但是0表示永远不会被选举成master
slave-priority 100

#如果集群中低于n个slave可用(超出指定的lag时间不可访问就认为不可用，单位s)，则master拒绝接收写请求
#lag时间就是通过ping来计算的 通常每秒都会ping
#其中一个值设为0就相当于禁用该功能
# min-slaves-to-write 3
# min-slaves-max-lag 10

#master能够列出所有的slaves的ip地址和port，比如通过INFO replication命令
#如果使用了端口转发或NAT，slave可以通过下面的配置告诉master自身节点的正确的值
# slave-announce-ip 5.5.5.5
# slave-announce-port 1234


#-----------------------------------------------------安全---------------------------------------------------------------------------------#
#设置密码
# requirepass foobared

#修改命令的名称 不影响内部使用 但是客户端将无法通过原命令获得预期的效果
#注意：对应的命令写入到aof文件也是被修改后的命令名称
#如果将命令名称修改为空字符串相当于禁用这个命令
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# rename-command CONFIG ""


#-----------------------------------------------------限制---------------------------------------------------------------------------------#
#客户端的最大并发连接数 默认10000
#最小32 因为redis需要保存一些文件描述符用于内部使用
# maxclients 10000

#设置内存上限
#超出上限 redis会根据淘汰策略删除key
#如果redis无法删除key或者删除策略被设置为noeviction，redis对写操作会返回错误，但是依旧能读
#如果有slave，则设置的内存上限至少满足主从同步复制数据所需大小(机器内存减去redis设置的内存上限是可供复制使用的)
# maxmemory <bytes>

#淘汰策略
# volatile-lru -> 删除最近最少使用的有过期时间的key
# allkeys-lru -> 删除最近最少使用的key
# volatile-random -> 随机删除有过期时间的key
# allkeys-random -> 随机删除key
# volatile-ttl -> 删除存活时间最短的key
# noeviction -> 不淘汰数据 对于后续写操作直接返回异常
# maxmemory-policy noeviction

#redis中的LRU和最小存活时间算法都不是精确的
#默认情况下，Redis将检查五个键并选择最近使用较少的键，可以更改样本大小
#样本为3时速度快 样本为10时比较准确但是消耗cpu性能
# maxmemory-samples 5


#lazyfree 4.x新特性 就是使用子线程去删除释放内存
#默认的删除策略是定期删除和惰性删除
#删除big key的问题：性能问题 可能导致主进程阻塞一段时间
#异步淘汰key
lazyfree-lazy-eviction no
#异步处理过期键
lazyfree-lazy-expire no
#异步处理del操作
lazyfree-lazy-server-del no
#slave在加载master的RDB文件前，会运行flushall来清理自己的数据，它表示此时是否开启lazyfree机制删除。
slave-lazy-flush no


#-----------------------------------------------------AOF---------------------------------------------------------------------------------#
#redis默认的异步dunp数据到磁盘的方式，即rdb一般是够用了，但是如果redis故障可能会导致有几分钟的数据没来得及落盘而丢失
#aof是可选的，持久性更好的方式，异常时只会丢失1s的数据
#aof和rdb方式可以同时使用，redis启动时如果启用了aof就优先从aof恢复
#aof是除了读数据 其他命令都会存储到aof文件中
#是否启用aof
appendonly no

#aof文件的名字
appendfilename "appendonly.aof"

#fsync的模式
#fsync函数同步内存中所有已修改的文件数据到储存设备
#	no			不主动调用fsync 由操作系统决定数据何时写入到磁盘
#	always		每次有写操作都会调用fsync将数据刷到磁盘
#	everysec	每秒fsync一次。 性能和数据安全的折中
appendfsync everysec

#fsync可能会被阻塞 然后阻塞正常的数据写操作
#当有子进程在执行BGSAVE或BGREWRITEAOF时可以设置主进程中不调用fsync() 即no-appendfsync-on-rewrite设为true
#也就意味着有其他后台备份进程正在执行时 当前的appendfsync策略相当于是no 如果宕机可能会导致30s的数据丢失
#no-appendfsync-on-rewrite默认为no 也就是主进程可能被阻塞 但是持久性更好
#是否在后台写时单写 no表示需要同步
no-appendfsync-on-rewrite no

#redis能自动调用BGREWRITEAOF进行aof重写
#原理就是redis每次重写之后记录了aof文件的大小，会将当前大小与基础大小进行比较，超出百分比就会触发一次重写，这次重写相当于一次bgsave
#aof文件增长比例，指当前aof文件比上次重写的增长比例大小
#避免了，aof文件过大而实际内存数据小的问题(频繁修改数据问题)
#同时也可以限制aof文件达到一定大小才重写
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

#aof文件中的最后一条命令可能是被截断的不完整的 因为redis意外宕机可能导致最后一条命令只写了一半
#如果设置为true redis启动时会加载最后一条命令 出错会记录日志
#如果设置为no redis启动时会检查最后一条命令是否正确 如果不正确将无法启动。可以手动通过redis-check-aof工具检查
aof-load-truncated yes

#是否启用redis4.x提供的aof+rdb混合持久化方案
#若为yes，在重写AOF文件时，Redis会将数据以RDB的格式作为AOF文件的开始部分。在重写之后，Redis会继续以AOF格式持久化写入操作
aof-use-rdb-preamble no

#-----------------------------------------------------Lua脚本---------------------------------------------------------------------------------#
#设置lua脚本执行的最大时间
#如果超出最大执行时间，脚本会继续执行，但是redis会记录日志并拒绝读操作
#超出后只能通过SCRIPT KILL 或者 SHUTDOWN NOSAVE去停止脚本
#设置0或负数表示不限制
lua-time-limit 5000


#-----------------------------------------------------集群---------------------------------------------------------------------------------#
#普通的redis实例不会成为redis集群中的节点，需要以集群节点的方式启动
# cluster-enabled yes

#集群节点必须指定集群配置文件 内容不需要手动编辑 它由redis节点创建更新
#确保在同一集群中没有相同的重名的配置名
# cluster-config-file nodes-6379.conf

#节点超时时间 超时后则认为这个节点故障不可用
#大多数的其他超时限制都是这个配置的倍数
# cluster-node-timeout 15000

#slave节点校验因子
#master节点挂掉 故障转移是需要选举一个新的slave成为master
#slave会计算复制的偏移量和最后一次与master交互的时间来决定谁的优先级高
#校验因子越小 该节点就越不可能进行故障转移。如果是0则表示节点总是会尝试故障转移
# cluster-slave-validity-factor 10

#设置主节点下从节点的个数 如果从节点数大于设定值 会尝试进行迁移(多余的从节点会尝试迁移到别的主节点下)
#在主节点中设置
#从节点升级为主节点之后 这个配置不会跟着改变
# cluster-migration-barrier 1

#集群中负责某个插槽slot的主节点下线 没有从节点接替 默认集群服务就不对外提供查询功能
# cluster-require-full-coverage yes


#-----------------------------------------------------慢查询日志---------------------------------------------------------------------------------#
#慢查询时间不包括I/O时间(client连接时间和响应时间等)，是单纯的命令执行的时间
#会记录慢于10000ms，即1s的查询
#设为0表示任何查询都记录日志 为负数表示禁用这个功能
slowlog-log-slower-than 10000

#慢查询日志记录队列的长度
slowlog-max-len 128


#-----------------------------------------------------延迟监控---------------------------------------------------------------------------------#
#通过LATENCY命令可以获取延迟信息
#0表示关闭延迟信息的监控
#运行时可通过CONFIG SET latency-monitor-threshold <milliseconds> 开启
latency-monitor-threshold 0


#-----------------------------------------------------事件通知---------------------------------------------------------------------------------#
#键空间通知（key-space）和键事件通知（key-event）
#如果配置 至少要有K或E中的一个
#空串表示禁用事件通知
notify-keyspace-events ""


#-----------------------------------------------------高级---------------------------------------------------------------------------------#
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000

#允许rehash
activerehashing yes

client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes