make
	-k				遇到错误时继续执行
	-n				输出将要执行的操作步骤 不真正执行
	-f	<filename>  指定文件 如果不指定 默认是makefile 再到Makefile
	--file=<filename>

规则：
<target> : <prerequisites> 
[tab]  <commands>
第一行表示目标：前置条件
第二行以Tab起首 后面跟命令
目标是必须的 前置条件和命令至少存在一个

目标：
	通常是文件名 指明make命令索要构建的对象。可以是多个文件名
	如果目标不是一个文件 比如说作为一个操作 如clean 则这个目标被称为伪目标
	可以式申明伪目标 如.PHONY: clean  否则执行make clean时 如果刚好当前目录有名为clean的文件 则不会重新构建
	make命令如果没有指定目标 默认会执行makefile文件的第一个目标
	
前置条件
	通常是一组文件名 用空格分隔。
	用来指定目标是否需要重新构建。只要有一个前置文件不存在或者有过更新 则目标需要重新构建
	
命令
	表示如何更新目标文件 由一行或多行shell命令组成。
	它是构建出目标的具体指令 它的运行结果通常就是生成目标文件。
	命令之前必须有一个tab键 可以通过内置变量.RECIPEPREFIX修改为其他键
	每行命令在一个单独的shell中执行 这些shell之间没有继承关系。
	多行命令需要在一个shell中执行的解决方案
		1）命令写在一行 中间用分号分隔。
		2）行尾加 \ 但是命令最后还是得加分号
		3) .ONESHELL:
		
======================================================================================================
		
注释 #

回声 echoing
	默认会打印每条命令(即命令部分的所有内容本身 包括注释行等)
	每行之前加@ 可以关闭回声。通常只在注释和纯显示的echo前加 所以会看到诸如@# 和@echo
	
通配符 *
模式匹配 %
	
变量/宏
		定义：	KEY=VALUE
		使用：  ${KEY}或$(KEY)
		调用shell变量时 需要再加一个$ 因为make命令会对美元符号$转义
		
		将变量赋值给另一个变量的问题
		=		动态扩展 运行时扩展 允许递归
		:=		静态扩展 定义时直接赋实际值
		?=		当变量为空时才设置值
		+=		将值追加到变量的尾端
		
内置变量
		$(CC)	当前使用的编译器
		$(MAKE) 当前使用的make工具
		
自动变量
		$@		当前目标 如make foo则指代foo
		$<		指代第一个前置条件
		$?		指代比目标更新的所有前置条件 空格分隔
		$^		指代所有的前置条件
		$(@D)	指向$@的目录名
		$(@F)	指向$@的文件名
		$(<D)	指向$<的目录名
		$(<F)	指向$<的文件名
		
判断和循环
		ifeq (v1, v2)
			@# todo
		else
			@# todo
		endif
		
		for i in $(LIST); do \
			echo $$i; \
		done	
		
函数
		$(function arguments)
		${function arguments}
		
		内置函数
			shell函数 		用来执行shell命令
							srcfiles := $(shell echo src/{00..99}.txt)
			wildcard函数	在Makefile中，替换Bash的通配符
							srcfiles := $(wildcard src/*.txt)
			subst函数		文本替换		$(subst from,to,text)
			patsubst函数	模式匹配的替换	$(patsubst pattern,replacement,text)		简写$(text:pattern,replacement)
			
			
			