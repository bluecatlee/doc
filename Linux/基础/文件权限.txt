文件权限
	eg：
	-rwxrwx---

	第一个字符
	  -  文件
	  d  目录
	  l  连接文件(linkfile)
	  b  设备文件里的可供存储的接口设备
	  c  设置文件里的串行端口设备，如键盘、鼠标（一次性读取设备）

	后面的字符三个为一组
	  第一组表示文件所有者权限	
	  第二组表示文件所属用户组的权限
	  第三组表示其他人的权限（不在同一个用户组里的其他用户即其他人）
	
		r 可读read          4      【对文件来说可读取文件的实际内容，对目录来说可以查看目录下的所有文件】
		w 可写write         2	   【对文件来说：可以编辑、新增、修改，但是不能删除文件，
					     对目录来说可以创建新的文件、目录，删除文件(与文件本身的权限无关)、目录，移动文件、目录位置】
		x 可执行execute     1	   【对文件来说是可以被系统执行的权限，对目录来说就是当前目录可以成为工作目录(能cd进入)】
		- 没有权限          0

		【windows系统中文件是否能执行时根据扩展名来判断的，如.exe .bat .com等，而Linux下只能根据是否有x权限，与扩展名没有关系】

		【如果某个目录只有读的权限也是不能进入该目录的】【能进入/切换到某个目录和能查看某个目录下的文件不一样】
		【能不能进入某个目录只和目录的x权限有关，目录的r权限只是能看到目录下的文件名】
		【如果文件不想让其他人看到 可以执行chmod 740 [filename]】
		【如果某个文件不想让其他人修改，但是可执行 则执行chmod 755 [filename]】

		【如果权限不够，比如账号只有某个文件的r权限 查看文件的详细权限信息会显示 ?--------- ? ? ? ? ? filename，只能看到文件名字
		  除非该账号是这个文件的所有者】
	
		【可执行与执行成功是两个概念 可执行只是代表有能力执行 具体执行成功还得看文件内容】

	三种身份 user group others
		u：user所有者
		g：group用户组
		o：others其他人
		a：all

		权限操作：chmod u=rwx,go=rx [filename] 设置权限
			  chmod a+w [filename] 给每个人都加上写入的权限
			  chmod a-x [filename] 给每个人都去掉可执行权限


文件默认权限umask
	uamsk的分数指的是权限默认值需要减掉的权限

	新建文件的默认权限为666
	新建目录的默认权限为777

文件特殊权限suid、sgid、sbit
	除了rwx之外还有st
		s：系统账号
		t：系统进程
		S：因为没有x权限 所以新增这个s权限后会显示为S，所以是无效的
		T：同上

	SUID：Set UID，s出现在文件所有者的x权限上      4
		仅对二进制程序有效，不可用在shell script本身，执行者执行该程序需要x权限，s权限仅在程序运行时有效，执行者将具有程序所有者的权限
	SGID：Set GID，s出现在用户组的x权限上          2
		对二进制程序和目录有效，程序执行者需要x权限，执行者在执行过程中将会获得该程序用户组的支持
	SBIT：Sticky Bit，                             1
		只针对目录有效

		操作eg ： chmod 1755 directoryname
			  chmod 7666 filename
			  chmod u=rwxs,go=x filename
			  chmod g+s filename